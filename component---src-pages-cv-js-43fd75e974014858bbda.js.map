{"version":3,"file":"component---src-pages-cv-js-43fd75e974014858bbda.js","mappings":"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","sources":["webpack://nilsson.dev/./src/components/cv/Section.js","webpack://nilsson.dev/./src/pages/cv.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { HTMLContent } from '../Content';\r\n\r\nconst CvSection = styled.section`\r\n  padding: 0.9em;\r\n\r\n  h2 {\r\n    text-transform: capitalize;\r\n    @media print {\r\n      font-size: 22px;\r\n      margin-bottom: 0.5em;\r\n    }\r\n  }\r\n\r\n  @media print {\r\n    padding: 0em 0.9em 1.7em 0.9em;\r\n    page-break-inside: avoid;\r\n    :last-child {\r\n      padding: 0em;\r\n    }\r\n    :first-child {\r\n      margin-top: 1em;\r\n    }\r\n  }\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    padding: 1.5em;\r\n  }\r\n`;\r\n\r\nconst CvRow = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst CvYear = styled.div.attrs(() => ({\r\n  'data-testid': 'year',\r\n}))`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  color: ${({ theme }) => theme.textSecondary};\r\n\r\n  @media print {\r\n    font-size: 15px;\r\n  }\r\n`;\r\nCvYear.defaultProps = {\r\n  theme: {\r\n    borderSecondary: '#000',\r\n    textSecondary: '#888',\r\n  },\r\n};\r\n\r\nconst BorderBox = styled.div`\r\n  flex: 6;\r\n  padding-left: 0.5em;\r\n  border-left: 1px solid ${({ theme }) => theme.borderSecondary};\r\n`;\r\n\r\nconst CvContent = styled(HTMLContent).attrs(() => ({\r\n  'data-testid': 'content',\r\n}))`\r\n  margin-bottom: 10px;\r\n  & p {\r\n    margin-bottom: 0px;\r\n  }\r\n  & li {\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  @media print {\r\n    flex: 6;\r\n    & p {\r\n      font-size: 16px;\r\n    }\r\n    & li {\r\n      font-size: 16px;\r\n    }\r\n    & a {\r\n      text-decoration: inherit;\r\n      color: inherit;\r\n      font-weight: inherit;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction compareDates(a, b) {\r\n  return new Date(b.start) - new Date(a.start);\r\n}\r\n\r\nfunction entryRenderer(entry) {\r\n  const dateOptionsMonthYear = { month: 'short', year: 'numeric' };\r\n  const dateOptionsyear = { year: 'numeric' };\r\n  const isRange = entry.end !== entry.start;\r\n  const isCurrent = !entry.end;\r\n\r\n  let startLabel = null;\r\n  let endLabel = null;\r\n\r\n  const dateOptions =\r\n    entry.start.length > 4 ? dateOptionsMonthYear : dateOptionsyear;\r\n  startLabel = new Date(entry.start).toLocaleString('en-En', dateOptions);\r\n  startLabel += isCurrent || isRange ? 'â€“' : '';\r\n  endLabel = isCurrent\r\n    ? 'Present'\r\n    : isRange\r\n    ? new Date(entry.end).toLocaleString('en-En', dateOptions)\r\n    : null;\r\n\r\n  return (\r\n    <CvRow key={entry.filePath}>\r\n      <CvYear>\r\n        <span>{startLabel}</span>\r\n        <span>{endLabel}</span>\r\n      </CvYear>\r\n      <BorderBox>\r\n        <CvContent content={entry.content} />\r\n      </BorderBox>\r\n    </CvRow>\r\n  );\r\n}\r\n\r\nfunction simpleEntryRenderer(entry) {\r\n  return <CvContent key={entry.filePath} content={entry.content} />;\r\n}\r\n\r\nconst Section = ({ section, entries, entryRenderer }) => {\r\n  const rows = [...entries].sort(compareDates).map((entry) => {\r\n    return entryRenderer(entry);\r\n  });\r\n\r\n  return (\r\n    <CvSection key={section}>\r\n      <h2>{section}</h2>\r\n      {rows}\r\n    </CvSection>\r\n  );\r\n};\r\n\r\nconst SectionWithoutYear = (props) => {\r\n  return <Section {...props} entryRenderer={simpleEntryRenderer} />;\r\n};\r\n\r\nconst SectionWithYear = (props) => {\r\n  return <Section {...props} entryRenderer={entryRenderer} />;\r\n};\r\n\r\nconst entryPropTypes = {\r\n  filePath: PropTypes.string,\r\n  start: PropTypes.string,\r\n  end: PropTypes.string,\r\n  content: PropTypes.string,\r\n};\r\n\r\nconst sectionPropTypes = {\r\n  section: PropTypes.string,\r\n  entries: PropTypes.arrayOf(PropTypes.shape(entryPropTypes)),\r\n};\r\n\r\nSectionWithoutYear.propTypes = sectionPropTypes;\r\nSectionWithYear.propTypes = sectionPropTypes;\r\nSection.propTypes = {\r\n  ...sectionPropTypes,\r\n  entryRenderer: PropTypes.func,\r\n};\r\n\r\nexport { SectionWithYear, SectionWithoutYear };\r\nexport default Section;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../components/Layout';\r\nimport Seo from '../components/Seo';\r\nimport { SectionWithoutYear, SectionWithYear } from '../components/cv/Section';\r\n\r\nconst CvPage = ({ data }) => {\r\n  let cvMap = {};\r\n  let listMap = {};\r\n  for (const edge of data.allMarkdownRemark.edges) {\r\n    let mapToUpdate = edge.node.frontmatter.type === 'list' ? listMap : cvMap;\r\n    const section = edge.node.frontmatter.section;\r\n    const entry = {\r\n      ...edge.node.frontmatter,\r\n      content: edge.node.html,\r\n      filePath: edge.node.fileAbsolutePath,\r\n    };\r\n    mapToUpdate[section] = mapToUpdate[section] || [];\r\n    mapToUpdate[section] = [...mapToUpdate[section], entry];\r\n  }\r\n\r\n  const sections = Object.entries(cvMap).map(([section, entries]) => (\r\n    <SectionWithYear key={section} section={section} entries={entries} />\r\n  ));\r\n\r\n  const lists = Object.entries(listMap).map(([section, entries]) => (\r\n    <SectionWithoutYear key={section} section={section} entries={entries} />\r\n  ));\r\n\r\n  return (\r\n    <Layout>\r\n      <Seo title=\"CV\" keywords={['portfolio', 'cv']} />\r\n      {sections}\r\n      {lists}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { frontmatter: { key: { eq: \"cv\" } } }\r\n      sort: { fields: frontmatter___end, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            start\r\n            end\r\n            section\r\n            type\r\n          }\r\n          fileAbsolutePath\r\n          html\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CvPage;\r\n"],"names":["CvSection","styled","CvRow","CvYear","theme","textSecondary","defaultProps","borderSecondary","BorderBox","CvContent","HTMLContent","attrs","compareDates","a","b","Date","start","entryRenderer","entry","endLabel","isRange","end","isCurrent","startLabel","dateOptions","length","month","year","toLocaleString","key","filePath","content","simpleEntryRenderer","Section","section","entries","rows","sort","map","SectionWithoutYear","props","SectionWithYear","cvMap","listMap","data","allMarkdownRemark","edges","edge","mapToUpdate","node","frontmatter","type","html","fileAbsolutePath","sections","Object","lists","Layout","Seo","title","keywords"],"sourceRoot":""}